schema {
  query: RootQuery
}

enum BookingDestinationImageDimensions {
  _1200x628
  _1280x720
  _220x165
  _275x250
  _300x165
  _375x165
  _600x330
  _600x600
  _610x251
}

interface BookingInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType
}

"""A connection to a list of items."""
type BookingInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingInterfaceEdge]
}

"""An edge in a connection."""
type BookingInterfaceEdge {
  """The item at the end of the edge"""
  node: BookingInterface

  """A cursor for use in pagination"""
  cursor: String!
}

"""Booking from A to B, B to C and so on, with possible stopovers"""
type BookingMulticity implements BookingInterface & FromToInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType
  trips: [Trip]
}

"""Booking from A to B with no return, but possible stopovers"""
type BookingOneWay implements BookingInterface & FromToInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType
  trip: Trip
}

"""Booking from A to B with return, and possible stopovers"""
type BookingReturn implements BookingInterface & FromToInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType
  inbound: Trip
  outbound: Trip
}

enum BookingType {
  BOOKING_RETURN
  BOOKING_MULTICITY
  BOOKING_ONE_WAY
}

"""Bookings contact email and phone"""
type ContactDetails {
  email: String
  phone: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DateType {
  local: DateTime
  utc: DateTime
}

"""
This data needs to be accessed on a Trip and on BookingOneWay/Return/Multicity,
so that we can re-use one component to show from to with correct icon
"""
interface FromToInterface {
  departure: RouteStop
  arrival: RouteStop
  type: BookingType
}

input ItinerariesSearchInput {
  travelFrom: String!
  travelTo: String

  """Search itineraries from this date"""
  dateFrom: Date!

  """Search itineraries up to this date"""
  dateTo: Date

  """Search itineraries return from this date"""
  returnDateFrom: Date

  """Search itineraries return up to this date"""
  returnDateTo: Date

  """Number of children, adults and infants travelling"""
  passengers: PassengersInput
}

type Itinerary {
  destination: Location
  endTime: DateType

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  origin: Location
  price: Price
  sectors: [Sector]
  startTime: DateType
  type: String
}

"""A connection to a list of items."""
type ItineraryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItineraryEdge]
}

"""An edge in a connection."""
type ItineraryEdge {
  """The item at the end of the edge"""
  node: Itinerary

  """A cursor for use in pagination"""
  cursor: String!
}

type Location {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
  slug: String
  locationId: String
  timezone: String
  country: LocationArea
  countryFlagURL: String
}

type LocationArea {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  locationId: String
  name: String
  slug: String
  code: String
  flagURL: String
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge"""
  node: Location

  """A cursor for use in pagination"""
  cursor: String!
}

input LocationsByTermInput {
  term: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Passenger details"""
type Passenger {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  bags: Int
  birthday: String
  category: String
  firstname: String
  insuranceType: String
  lastname: String
  nationality: String
  title: String
  visaRequired: Boolean
}

input PassengersInput {
  adults: Int
  children: Int
  infants: Int
}

type Price {
  amount: Float
  currency: String
}

type RootQuery {
  """Find a booking by its id"""
  bookingDetail(id: ID!): BookingInterface

  """Retrieve all your bookings."""
  customerBookings(after: String, first: Int, before: String, last: Int): BookingInterfaceConnection

  """Query for suggested locations based on incomplete names"""
  locationsByTerm(input: LocationsByTermInput!, after: String, first: Int, before: String, last: Int): LocationConnection

  """Query to fetch all itineraries(flights, busses, trains)"""
  searchItineraries(input: ItinerariesSearchInput!, after: String, first: Int, before: String, last: Int): ItineraryConnection
}

"""Departure or arrival for a segment"""
type RouteStop {
  cityName: String
  cityId: String
  time: DateType
  airport: Location
}

type Sector {
  duration: Int
  segments: [Segment]
  stopoverDuration: Int
  departure: RouteStop
  arrival: RouteStop
}

type Segment {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  transporter: Transporter
  duration: Int
  vehicle: Vehicle
  departure: RouteStop
  arrival: RouteStop
}

type Transporter {
  name: String
}

"""Single travel from origin to destination, with possible stopovers."""
type Trip implements FromToInterface {
  departure: RouteStop
  arrival: RouteStop
  duration: Int
  type: BookingType
}

type Vehicle {
  type: String
  uniqueNo: String
}
