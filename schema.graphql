schema {
  query: RootQuery
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input ItinerariesSearchInput {
  travelFrom: String!
  travelTo: String

  """Search itineraries from this date"""
  dateFrom: Date!

  """Search itineraries up to this date"""
  dateTo: Date

  """Search itineraries return from this date"""
  returnDateFrom: Date

  """Search itineraries return up to this date"""
  returnDateTo: Date

  """Number of children, adults and infants travelling"""
  passengers: PassengersInput
}

type Itinerary {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  flyFrom: String
  flyTo: String
  localDeparture: String
  localArrival: String
  price: Price
  route: [Route]
  routes: [[String]]
}

"""A connection to a list of items."""
type ItineraryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItineraryEdge]
}

"""An edge in a connection."""
type ItineraryEdge {
  """The item at the end of the edge"""
  node: Itinerary

  """A cursor for use in pagination"""
  cursor: String!
}

type Location {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
  slug: String
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge"""
  node: Location

  """A cursor for use in pagination"""
  cursor: String!
}

input LocationsByTermInput {
  term: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PassengersInput {
  adults: Int
  children: Int
  infants: Int
}

type Price {
  amount: Int
  currency: String
}

type RootQuery {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Query to fetch all itineraries(flights, busses, trains)"""
  searchItineraries(input: ItinerariesSearchInput!, after: String, first: Int, before: String, last: Int): ItineraryConnection

  """Query for suggested locations based on incomplete names"""
  locationsByTerm(input: LocationsByTermInput!, after: String, first: Int, before: String, last: Int): LocationConnection

  """A simple type for getting started!"""
  hello: String
}

type Route {
  airline: String
  cityFrom: String
  cityTo: String
  flyFrom: String
  flyTo: String
  id: String
  localArrival: DateTime
  utcArrival: DateTime
  localDeparture: DateTime
  utcDeparture: DateTime
}
