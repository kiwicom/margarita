schema {
  query: RootQuery
}

"""Passenger's bag type and quantity"""
type Bag {
  type: BagType
  quantity: Int
  dimensions: String
}

"""Bag types"""
enum BagType {
  CABIN_BAG
  PERSONAL_ITEM
  CHECKED_BAGGAGE
}

enum BookingDestinationImageDimensions {
  _1200x628
  _1280x720
  _220x165
  _275x250
  _300x165
  _375x165
  _600x330
  _600x600
  _610x251
}

interface BookingInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType @deprecated(reason: "Use __typename instead")

  """Total count of bags by the type"""
  bagInfo: [Bag]
}

"""A connection to a list of items."""
type BookingInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingInterfaceEdge]
}

"""An edge in a connection."""
type BookingInterfaceEdge {
  """The item at the end of the edge"""
  node: BookingInterface

  """A cursor for use in pagination"""
  cursor: String!
}

"""Booking from A to B, B to C and so on, with possible stopovers"""
type BookingMulticity implements BookingInterface & FromToInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType @deprecated(reason: "Use __typename instead")

  """Total count of bags by the type"""
  bagInfo: [Bag]
  sectors: [Sector]
}

"""Booking from A to B with no return, but possible stopovers"""
type BookingOneWay implements BookingInterface & FromToInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType @deprecated(reason: "Use __typename instead")

  """Total count of bags by the type"""
  bagInfo: [Bag]
  sector: Sector
}

"""Booking from A to B with return, and possible stopovers"""
type BookingReturn implements BookingInterface & FromToInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  status: String
  contactDetails: ContactDetails
  passengers: [Passenger]
  arrival: RouteStop
  departure: RouteStop
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String
  passengerCount: Int

  """OneWay, Multicity or Return"""
  type: BookingType @deprecated(reason: "Use __typename instead")

  """Total count of bags by the type"""
  bagInfo: [Bag]
  inbound: Sector
  outbound: Sector
}

enum BookingType {
  BOOKING_RETURN
  BOOKING_MULTICITY
  BOOKING_ONE_WAY
}

"""Bookings contact email and phone"""
type ContactDetails {
  email: String
  phone: String
}

"""GPS coordinate"""
type Coordinate {
  lat: Float
  lng: Float
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateRange {
  """Start of the date range"""
  start: Date!

  """End of the date range"""
  end: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DateType {
  local: DateTime
  utc: DateTime
}

"""
This data needs to be accessed on a Trip and on BookingOneWay/Return/Multicity,
so that we can re-use one component to show from to with correct icon
"""
interface FromToInterface {
  departure: RouteStop
  arrival: RouteStop
  type: BookingType
}

type HttpError {
  code: Int!
  message: String!
}

input ItinerariesOneWaySearchInput {
  """Order of the search"""
  order: OrderSearchInput

  """Sorting of the search"""
  sort: SortSearchInput

  """How many passengers are travelling"""
  passengers: PassengersInput

  """Itinerary for the One Way search"""
  itinerary: ItineraryOneWayInput!
}

input ItinerariesReturnSearchInput {
  """Order of the search"""
  order: OrderSearchInput

  """Sorting of the search"""
  sort: SortSearchInput

  """How many passengers are travelling"""
  passengers: PassengersInput

  """Itinerary for the return search"""
  itinerary: ItineraryReturnInput!
}

type Itinerary {
  destination: Location
  endTime: DateType

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  origin: Location
  price: Price
  sectors: [Sector]
  startTime: DateType
  type: String
  bookingToken: String

  """All segments successfully checked"""
  isChecked: Boolean

  """Itinerary is valid (exists and is not sold-out or cancelled)"""
  isValid: Boolean
}

input ItineraryCheckInput {
  """Token received in search results"""
  bookingToken: String!

  """Number of checked bags for the booking"""
  bags: Int!

  """Number of children, adults and infants travelling"""
  passengers: PassengersInput!
}

"""A connection to a list of items."""
type ItineraryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItineraryEdge]
}

"""An edge in a connection."""
type ItineraryEdge {
  """The item at the end of the edge"""
  node: Itinerary

  """A cursor for use in pagination"""
  cursor: String!
}

input ItineraryOneWayInput {
  """Origin location of the travel"""
  origin: LocationItineraryInput!

  """Destination location of the travel"""
  destination: LocationItineraryInput

  """Date Range of departure"""
  outboundDate: DateRange!
}

input ItineraryReturnInput {
  """Origin location of the travel"""
  origin: LocationItineraryInput!

  """Destination location of the travel"""
  destination: LocationItineraryInput

  """Date Range of departure"""
  outboundDate: DateRange!

  """Date Range of flight back"""
  inboundDate: DateRange!
}

type Location {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
  slug: String
  locationId: String
  timezone: String
  country: LocationArea
  city: LocationArea
  coordinates: Coordinate
  type: LocationType
  countryFlagURL: String
}

type LocationArea {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  locationId: String
  name: String
  slug: String
  code: String
  flagURL: String
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge"""
  node: Location

  """A cursor for use in pagination"""
  cursor: String!
}

input LocationItineraryInput {
  """Locations IDs for travel"""
  ids: [String]
}

input LocationsByTermInput {
  term: String!

  """Desired location type output"""
  types: [LocationType]
}

union LocationsResult = LocationConnection | HttpError

enum LocationType {
  STATION
  AIRPORT
  BUS_STATION
  CITY
  SUBDIVISION
  COUNTRY
  REGION
  CONTINENT
  AUTONOMOUS_TERRITORY
  SPECIAL
}

enum OrderSearchInput {
  ASC
  DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Passenger details"""
type Passenger {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  bags: [Bag]
  birthday: String
  category: String
  firstname: String
  insuranceType: String
  lastname: String
  nationality: String
  title: String
  visaRequired: Boolean
}

input PassengersInput {
  adults: Int
  children: Int
  infants: Int
}

type Price {
  amount: Float
  currency: String
}

type RootQuery {
  """Find a booking by its id"""
  bookingDetail(id: ID!): BookingInterface

  """Retrieve all your bookings."""
  customerBookings(after: String, first: Int, before: String, last: Int): BookingInterfaceConnection

  """Query for suggested locations based on incomplete names"""
  locationsByTerm(input: LocationsByTermInput!, after: String, first: Int, before: String, last: Int): LocationsResult

  """Query to fetch all one way itineraries(flights, busses, trains)"""
  searchOneWayItineraries(input: ItinerariesOneWaySearchInput!, after: String, first: Int, before: String, last: Int): ItineraryConnection

  """Query to fetch all return itineraries(flights, busses, trains)"""
  searchReturnItineraries(input: ItinerariesReturnSearchInput!, after: String, first: Int, before: String, last: Int): ItineraryConnection

  """Check if itinerary is valid and bookable"""
  checkItinerary(input: ItineraryCheckInput!): Itinerary
}

"""Departure or arrival for a segment or sector"""
type RouteStop {
  """Contains utc and local time for arrival/departure of the stop"""
  time: DateType

  """
  This could be bus stop, trainstation, airport, anywhere the Sector or segment comes to a stop
  """
  stop: Location
}

type Sector implements FromToInterface {
  duration: Int
  segments: [Segment]
  stopoverDuration: Int
  departure: RouteStop
  arrival: RouteStop
  type: BookingType
}

type Segment {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  transporter: Transporter
  duration: Int
  vehicle: Vehicle
  departure: RouteStop
  arrival: RouteStop
}

enum SortSearchInput {
  PRICE
  DURATION
  QUALITY
  DATE
  POPULARITY
}

type Transporter {
  name: String
}

type Vehicle {
  type: String
  uniqueNo: String
}
